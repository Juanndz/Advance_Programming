# -*- coding: utf-8 -*-
"""FirtsWorkshop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15oKrdc5-oxL5ya4GLw8jyPzBxOOonDZq

#First Workshop - Advanced Programming

##Statement - _Vehicule company_

You are on charge to create a new internal platform to define a catalog of vehicles, with next requirements:
Each vehicle has at least engine, chasis (A or B), model, gas consumption, and year.
Depending on the vehicle type, you should define additional properties.
There are different vehicle types: car, truck, yacht, motorcycle.
Each engine has type, potency, weight.

To calculate the vehicle gas consumption you could create a method based on:

1.1 * engine.potency + 0.2 * engine.weight - (0.3 if chassis==A or 0.5 if chassis==B)

You must deliver a technical report where a Class Diagram of your solution is provided.

Also, you must write about technical concerns and decisions you make to create the architecture you are proposing.
Also, you must create the code and provide a simple menu to create vehicles, review all vehicles registered

##Solution
"""

#================= Class Engine ====================

class Engine:
  """This class represents the behaviors of the engine"""

  def __init__(self, type: str, potency: float, weight: float): #Type hiting. For data of the expect types
    #Constructor
    self.type = type
    self.potency = potency
    self.weight = weight

  def engineCharacteristics(self): # A Method just for show the characteristics of a singular vehicule.
    print("Type:", self.type)
    print("Potency:", self.potency, "HP")
    print("Weight:", self.weight, "Kg")

#================= Class Vehicule =================
class Vehicule:
  """ This class has the elements of the a vehicule and their actions"""

  def __init__(self, engine: Engine, chassis: str, model: str, year: int, gas_consumption: float): #Type hiting. For data of the expect types.
    #Constructor
    self._engine = engine
    self._chassis = chassis
    self._model = model
    self._year = year
    self._gas_consumption = gas_consumption

    if not chassis in ["A", "B"]:
      raise ValueError("This chassis is not valid.")

  def calculateConsumption(self): #Function to calculate the Gas consumption of the vehicule
    consumption = (
        (1.1 * self.engine._potency) + (0.2 * self.engine.weight) - (0.3 if self.chassis == "A" else 0.5)
    )

#================= Class of Vehicles ===============

class Car(Vehicule):
  def __init__(self, Engine, chassis, model, year, gas_consumption):
    super().__init__(Engine, chassis, model, year, gas_consumption)

class Truck(Vehicule):
  def __init__(self, Engine, chassis, model, year, gas_consumption):
    super().__init__(Engine, chassis, model, year, gas_consumption)

class Yacht(Vehicule):
  def __init__(self, Engine, chassis, model, year, gas_consumption):
    super().__init__(Engine, chassis, model, year, gas_consumption)

class Motorcycle(Vehicule):
  def __init__(self, Engine, chassis, model, year, gas_consumption):
    super().__init__(Engine, chassis, model, year, gas_consumption)

Car_1 = Engine("V6", 300, 200)
Car_1.engineCharacteristics()

# ============================== Menu ==============================

message = """
    Please, choose an option:
    1. Create an engine
    2. Create a car
    3. Create a truck
    4. Create a yatch
    5. Create a motorcycle
    6. Show all engines
    7. Show all vehicles
    8. Exit
  """
enginees = {}
global vehicles
[]

def option_1(): #Method to define the characteristics of the engine by console.
    name = input("Please, write a name to identify the engine: ")
    type_motor = input("Please, write the type of engine: ")
    potency = int(input("Please, write the potency in a integer value for the engine: "))
    weight = float(input("Please, write the weight in a decimal value for the engine: "))
    new_engine = Engine(type_motor, potency, weight)
    enginees[name] = new_engine

def create_vehicle(vehicle_type: str): #For the seleccion, create the type of vehicule.
    engine = input(f"Please, write the name of the engine for the {vehicle_type}:")
    model = input(f"Please, write the model for the {vehicle_type}:")
    year = int(input(f"Please, write the year for the {vehicle_type}:"))
    chassis = input(f"Please, write the chassis (A or B) for the {vehicle_type}:")

    if vehicle_type == "car":
        vehicles.append(Car(chassis, model, year, engine))
    elif vehicle_type == "truck":
      vehicles.append(Truck(chassis, model, year, engine))
    elif vehicle_type == "yacht":
      vehicles.append(Yacht(chassis, model, year, engine))
    elif vehicle_type == "motorcycle":
      vehicles.append(Motorcycle(chassis, model, year, engine))

def menu():
    """This function represents the menu of the application."""
    print(message)
    option = int(input())
    while option != 8:
        if option == 1:
              option_1()
        elif option == 2:
              create_vehicle("car")
        elif option == 3:
              create_vehicle("truck")
        elif option == 4:
              create_vehicle("yatch")
        elif option == 5:
              create_vehicle("motorcycle")
        elif option == 6:
              print(enginees)
        elif option == 7:
              print(vehicles)


if __name__ == "__main__":
    menu()